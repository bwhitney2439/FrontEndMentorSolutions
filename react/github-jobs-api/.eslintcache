[{"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\index.js":"1","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\App.jsx":"2","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Toggle.jsx":"3","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Header.jsx":"4","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Filter.jsx":"5","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Card.jsx":"6","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\JobInfo.jsx":"7","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Modal.jsx":"8","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\hooks\\useMedia.js":"9"},{"size":432,"mtime":1611101341318,"results":"10","hashOfConfig":"11"},{"size":3064,"mtime":1612139165034,"results":"12","hashOfConfig":"11"},{"size":721,"mtime":1611962243993,"results":"13","hashOfConfig":"11"},{"size":831,"mtime":1611497320526,"results":"14","hashOfConfig":"11"},{"size":4344,"mtime":1612096446585,"results":"15","hashOfConfig":"11"},{"size":2528,"mtime":1612025248632,"results":"16","hashOfConfig":"11"},{"size":4992,"mtime":1611959513158,"results":"17","hashOfConfig":"11"},{"size":1210,"mtime":1611971553748,"results":"18","hashOfConfig":"11"},{"size":1350,"mtime":1612027801193,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"16fm99c",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\index.js",[],["41","42"],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\App.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Toggle.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Header.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Filter.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Card.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\JobInfo.jsx",[],"D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\components\\Modal.jsx",["43"],"import React, { useEffect } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MODAL_STYLES = {\r\n  position: \"fixed\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  backgroundColor: \"#FFF\",\r\n  padding: \"50px\",\r\n  zIndex: 1000,\r\n};\r\n\r\nconst ModalOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: #000000;\r\n  mix-blend-mode: normal;\r\n  opacity: 0.5;\r\n  zindex: 1000;\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  position: fixed;\r\n  top: 225px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  zindex: 1100;\r\n  width: 327px;\r\n  height: 217px;\r\n  background: #19202d;\r\n  border-radius: 6px;\r\n`;\r\n\r\nexport const Modal = ({ open, children, onClose }) => {\r\n  useEffect(() => {\r\n    if (open) {\r\n      document.querySelector(\"html\").style.overflow = \"hidden\";\r\n    } else {\r\n      document.querySelector(\"html\").style.overflow = \"unset\";\r\n    }\r\n  }, [open]);\r\n\r\n  if (!open) return null;\r\n  return ReactDom.createPortal(\r\n    <>\r\n      <ModalOverlay onClick={onClose} />\r\n      <FilterContainer>{children}</FilterContainer>\r\n    </>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n};\r\n","D:\\FrontendMentorSolutions\\FrontEndMentorSolutions\\react\\github-jobs-api\\src\\hooks\\useMedia.js",["44"],"import { useEffect, useState } from \"react\";\r\n\r\nexport const useMedia = (queries, values, defaultValue) => {\r\n  // Array containing a media query list for each query\r\n  const mediaQueryLists = queries.map((q) => window.matchMedia(q));\r\n\r\n  // Function that gets value based on matching media query\r\n  const getValue = () => {\r\n    // Get index of first media query that matches\r\n    const index = mediaQueryLists.findIndex((mql) => mql.matches);\r\n    // Return related value or defaultValue if none\r\n    return typeof values[index] !== \"undefined\" ? values[index] : defaultValue;\r\n  };\r\n\r\n  // State and setter for matched value\r\n  const [value, setValue] = useState(getValue);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Event listener callback\r\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\r\n      // ... current values of hook args (as this hook callback is created once on mount).\r\n      const handler = () => setValue(getValue);\r\n      // Set a listener for each media query with above handler as callback.\r\n      mediaQueryLists.forEach((mql) => mql.addListener(handler));\r\n      // Remove listeners on cleanup\r\n      return () =>\r\n        mediaQueryLists.forEach((mql) => mql.removeListener(handler));\r\n    },\r\n    [] // Empty array ensures effect is only run on mount and unmount\r\n  );\r\n\r\n  return value;\r\n};\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":7,"nodeType":"51","messageId":"52","endLine":5,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":30,"column":5,"nodeType":"55","endLine":30,"endColumn":7,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'MODAL_STYLES' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getValue' and 'mediaQueryLists'. Either include them or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [getValue, mediaQueryLists]",{"range":"62","text":"63"},[1254,1256],"[getValue, mediaQueryLists]"]